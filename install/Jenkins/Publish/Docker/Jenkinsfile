def app = [appName: 'discovery-server',   appPort: '7001']

pipeline {

  /* Environment variables related to docker hub */
  environment {
    registry = "nisumpk"
    registryCredential = 'docker-hub-credentials'
    dockerHost = 'localhost'
  }
  
  agent any
  
  tools {
    maven 'apache-maven' 
  }

  stages {

    stage('Clone Application') {

        /* Git checkout using declarative method 'scm' */
        steps {
            checkout scm
        }
        /*steps {
            checkout([$class: 'GitSCM',
                      branches: [[name: '/master']],
                      doGenerateSubmoduleConfigurations: false,
                      extensions: [[$class: 'WipeWorkspace']],
                      submoduleCfg: [],
                      userRemoteConfigs: [[credentialsId:'10dc7c72-ff75-4986-8001-6da6b3a917bb', url: 'https://github.com/nisum-inc/POC_Discovery_Server.git']]
                      //userRemoteConfigs: [[credentialsId: '16e9c02e-8b5a-41de-b05e-5c0ac770dc97', url: 'https://github.com/nisum-inc/POC_Discovery_Server.git']]
            ])*/
        }

    } // end of stage

    stage('Build Application') {

    	/* this is temporary step, ideally jar file should be downloaded from any artifact server. */
    	steps {
    		sh "cd ${WORKSPACE} && mvn -Dmaven.test.failure.ignore -Dmaven.test.skip=true clean package"
    	}

    } // end of stage

    stage('Building Images') {

      steps {

        script {
                //def application = """${app}"""
                //application = application.replaceAll("_", "-")

                /* Copying jar file to relavant directory */
                sh script: "cp ${WORKSPACE}/target/" + app.appName + "*SNAPSHOT.jar ${WORKSPACE}/install/deploy/docker/" + app.appName.replaceAll("-", "_") + "/"

                /* Building docker image */
                docker.build(registry + "/" + app.appName.replaceAll("-", "_"), "-f ${WORKSPACE}/install/deploy/docker/" + app.appName.replaceAll("-", "_") + "/Dockerfile ${WORKSPACE}/install/deploy/docker")
        }

      }

    } // end of stage

    stage('Tagging Images') {

        steps {

            script {

                commit= sh (returnStatus: true, script: "git log -1 --pretty=%h > gitOutput.txt")
                gitStatus = readFile('gitOutput.txt').trim()
                appVersion = readFile('version').trim()
                /* Assigning tag as Jenkins git pretty name and Build_Number for tracking pupose */
                sh script: "docker tag " + registry + "/" + app.appName.replaceAll("-", "_") + ":latest " + registry + "/" + app.appName.replaceAll("-", "_") + ":" + appVersion + "_${BUILD_NUMBER}_" + gitStatus
            }
        }
    } // end of stage

    stage('Push Images To Docker-Hub') {

       steps {

           script {

               commit= sh (returnStatus: true, script: "git log -1 --pretty=%h > gitOutput.txt")
               gitStatus = readFile('gitOutput.txt').trim()
               ver = readFile('version').trim()
               try {
                   /* Uploading image to docker hub using docker cli */
                   withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.registryCredential}",
                   usernameVariable: 'dockerUser', passwordVariable: 'dockerPassword']]) {
                      sh "docker login -u$dockerUser -p$dockerPassword; docker push ${env.registry}/" + app.appName.replaceAll("-", "_") + ":" + appVersion + "_${BUILD_NUMBER}_" + gitStatus + ";docker push ${env.registry}/" + app.appName.replaceAll("-", "_") + ":latest"
                   }
               } finally {
                    /* logging out docker account */
                    sh "docker logout"
               }
           }

       }
    } // end of stage

    stage('Create And Upload Helm Chart') {
        agent {
            label "k8-master"
        }
        steps {
            script {
                checkout scm
                //git branch: 'master',
                //    credentialsId: '10dc7c72-ff75-4986-8001-6da6b3a917bb',
                //    url: 'https://github.com/nisum-inc/POC_Discovery_Server.git'

                commit = sh (returnStatus: true, script: "git log -1 --pretty=%h > gitOutput.txt")
                gitStatus = readFile('gitOutput.txt').trim()
                appVersion = readFile('version').trim()

                getGitURL = sh (returnStatus: true, script: "git config --get remote.origin.url | awk -F':' '{ print \$NF }' | sed 's|//||g' > gitURL.txt")
                getGitURL = readFile('gitURL.txt').trim()

                sh script: " sed -i \"s/tag:.*\$/tag: " + appVersion + "_${BUILD_NUMBER}_" + gitStatus + "/g\" ${WORKSPACE}/install/deploy/helm/" + app.appName + "/values.yaml"
                sh script: " sed -i \"s/BLUEGREEN/blue/g\" ${WORKSPACE}/install/deploy/helm/" + app.appName + "/values.yaml"
                sh script: " sed -i \"s/version:.*\$/version: v1.0.0_${BUILD_NUMBER}/g\" ${WORKSPACE}/install/deploy/helm/" + app.appName + "/Chart.yaml"
                sh script: "cd ${WORKSPACE}/install/deploy/helm && helm package " + app.appName

                withCredentials([usernamePassword(credentialsId: 'GIT_CREDENTIALS', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh("git add ${WORKSPACE}/install/deploy/helm/" + app.appName + "-*_${BUILD_NUMBER}.tgz")
                    sh("git commit -m \"Add udpated tgz package\"")
                    sh('git push https://${GIT_USERNAME}:${GIT_PASSWORD}@' + getGitURL + ' HEAD' )
                }
            }
        }
    }

    /*stage('Trigger Blue/Green Deployment') {

      steps {
        build job: '/DevOpsPOC_BlueGreen_Deploy_DiscoverySVR'
      }

    } */ // end of stage

  } // end of all stages

} // end of pipeline
